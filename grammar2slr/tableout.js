var productions_str = {
    0:{prod:"__",rside:["Stmt"]},
    1:{prod:"Stmt",rside:["Exp"]},
    2:{prod:"Exp",rside:["Exp","plus","Exp"]},
    3:{prod:"Exp",rside:["Exp","minus","Exp"]},
    4:{prod:"Exp",rside:["Exp","times","Exp"]},
    5:{prod:"Exp",rside:["Exp","divide","Exp"]},
    6:{prod:"Exp",rside:["Exp","modulo","Exp"]},
    7:{prod:"Exp",rside:["Exp","power","Exp"]},
    8:{prod:"Exp",rside:["minus","Exp"]},
    9:{prod:"Exp",rside:["Exp","and","Exp"]},
    10:{prod:"Exp",rside:["Exp","or","Exp"]},
    11:{prod:"Exp",rside:["Exp","imp","Exp"]},
    12:{prod:"Exp",rside:["Exp","biimp","Exp"]},
    13:{prod:"Exp",rside:["not","Exp"]},
    14:{prod:"Exp",rside:["Exp","up","Exp"]},
    15:{prod:"Exp",rside:["Exp","mid","Exp"]},
    16:{prod:"Exp",rside:["Exp","amp","Exp"]},
    17:{prod:"Exp",rside:["tilde","Exp"]},
    18:{prod:"Exp",rside:["Exp","eq","Exp"]},
    19:{prod:"Exp",rside:["Exp","not-eq","Exp"]},
    20:{prod:"Exp",rside:["Exp","gt","Exp"]},
    21:{prod:"Exp",rside:["Exp","geq","Exp"]},
    22:{prod:"Exp",rside:["Exp","lt","Exp"]},
    23:{prod:"Exp",rside:["Exp","leq","Exp"]}
};
var actionTable = {
    0:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    1:{
        "amp":function(lang){ return lang.shift(6); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.shift(10); },
        "geq":function(lang){ return lang.shift(11); },
        "gt":function(lang){ return lang.shift(12); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.shift(14); },
        "lt":function(lang){ return lang.shift(15); },
        "mid":function(lang){ return lang.shift(16); },
        "minus":function(lang){ return lang.shift(17); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.shift(19); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.shift(21); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.shift(24); },
        "$":function(lang){ return lang.reduce(1); }
        },
    2:{
        "amp":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'eoi', but given 'delimiter'"); },
        "minus":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "modulo":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "not":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "tilde":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "times":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'eoi', but given 'operator'"); },
        "$":function(lang){ return lang.accept(); }
        },
    3:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    4:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    5:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    6:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    7:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    8:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    9:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    10:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    11:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    12:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    13:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    14:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    15:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    16:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    17:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    18:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    19:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    20:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    21:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    22:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    23:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    24:{
        "amp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "and":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "biimp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "divide":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "geq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "gt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "imp":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "leq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "lt":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "mid":function(lang){ return lang.error("expected 'operator', but given 'delimiter'"); },
        "minus":function(lang){ return lang.shift(3); },
        "modulo":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "not":function(lang){ return lang.shift(4); },
        "not-eq":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "or":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "tilde":function(lang){ return lang.shift(5); },
        "times":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "up":function(lang){ return lang.error("expected 'operator', but given 'operator'"); },
        "$":function(lang){ return lang.error("expected 'operator', but given '$'"); }
        },
    25:{
        "amp":function(lang){ return lang.reduce(8); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.reduce(8); },
        "geq":function(lang){ return lang.reduce(8); },
        "gt":function(lang){ return lang.reduce(8); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(8); },
        "lt":function(lang){ return lang.reduce(8); },
        "mid":function(lang){ return lang.reduce(8); },
        "minus":function(lang){ return lang.reduce(8); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(8); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.reduce(8); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.reduce(8); },
        "$":function(lang){ return lang.reduce(8); }
        },
    26:{
        "amp":function(lang){ return lang.reduce(13); },
        "and":function(lang){ return lang.reduce(13); },
        "biimp":function(lang){ return lang.reduce(13); },
        "divide":function(lang){ return lang.reduce(13); },
        "eq":function(lang){ return lang.reduce(13); },
        "geq":function(lang){ return lang.reduce(13); },
        "gt":function(lang){ return lang.reduce(13); },
        "imp":function(lang){ return lang.reduce(13); },
        "leq":function(lang){ return lang.reduce(13); },
        "lt":function(lang){ return lang.reduce(13); },
        "mid":function(lang){ return lang.reduce(13); },
        "minus":function(lang){ return lang.reduce(13); },
        "modulo":function(lang){ return lang.reduce(13); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(13); },
        "or":function(lang){ return lang.reduce(13); },
        "plus":function(lang){ return lang.reduce(13); },
        "power":function(lang){ return lang.reduce(13); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.reduce(13); },
        "up":function(lang){ return lang.reduce(13); },
        "$":function(lang){ return lang.reduce(13); }
        },
    27:{
        "amp":function(lang){ return lang.reduce(17); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.reduce(17); },
        "geq":function(lang){ return lang.reduce(17); },
        "gt":function(lang){ return lang.reduce(17); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(17); },
        "lt":function(lang){ return lang.reduce(17); },
        "mid":function(lang){ return lang.reduce(17); },
        "minus":function(lang){ return lang.shift(17); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(17); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.shift(21); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.reduce(17); },
        "$":function(lang){ return lang.reduce(17); }
        },
    28:{
        "amp":function(lang){ return lang.reduce(16); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.reduce(16); },
        "geq":function(lang){ return lang.reduce(16); },
        "gt":function(lang){ return lang.reduce(16); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(16); },
        "lt":function(lang){ return lang.reduce(16); },
        "mid":function(lang){ return lang.shift(16); },
        "minus":function(lang){ return lang.shift(17); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(16); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.shift(21); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.shift(24); },
        "$":function(lang){ return lang.reduce(16); }
        },
    29:{
        "amp":function(lang){ return lang.reduce(9); },
        "and":function(lang){ return lang.reduce(9); },
        "biimp":function(lang){ return lang.reduce(9); },
        "divide":function(lang){ return lang.reduce(9); },
        "eq":function(lang){ return lang.reduce(9); },
        "geq":function(lang){ return lang.reduce(9); },
        "gt":function(lang){ return lang.reduce(9); },
        "imp":function(lang){ return lang.reduce(9); },
        "leq":function(lang){ return lang.reduce(9); },
        "lt":function(lang){ return lang.reduce(9); },
        "mid":function(lang){ return lang.reduce(9); },
        "minus":function(lang){ return lang.reduce(9); },
        "modulo":function(lang){ return lang.reduce(9); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(9); },
        "or":function(lang){ return lang.reduce(9); },
        "plus":function(lang){ return lang.reduce(9); },
        "power":function(lang){ return lang.reduce(9); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.reduce(9); },
        "up":function(lang){ return lang.reduce(9); },
        "$":function(lang){ return lang.reduce(9); }
        },
    30:{
        "amp":function(lang){ return lang.reduce(12); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.reduce(12); },
        "eq":function(lang){ return lang.reduce(12); },
        "geq":function(lang){ return lang.reduce(12); },
        "gt":function(lang){ return lang.reduce(12); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(12); },
        "lt":function(lang){ return lang.reduce(12); },
        "mid":function(lang){ return lang.reduce(12); },
        "minus":function(lang){ return lang.reduce(12); },
        "modulo":function(lang){ return lang.reduce(12); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(12); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.reduce(12); },
        "power":function(lang){ return lang.reduce(12); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.reduce(12); },
        "up":function(lang){ return lang.reduce(12); },
        "$":function(lang){ return lang.reduce(12); }
        },
    31:{
        "amp":function(lang){ return lang.reduce(5); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.reduce(5); },
        "eq":function(lang){ return lang.reduce(5); },
        "geq":function(lang){ return lang.reduce(5); },
        "gt":function(lang){ return lang.reduce(5); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(5); },
        "lt":function(lang){ return lang.reduce(5); },
        "mid":function(lang){ return lang.reduce(5); },
        "minus":function(lang){ return lang.reduce(5); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(5); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.reduce(5); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.reduce(5); },
        "up":function(lang){ return lang.reduce(5); },
        "$":function(lang){ return lang.reduce(5); }
        },
    32:{
        "amp":function(lang){ return lang.shift(6); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.reduce(18); },
        "geq":function(lang){ return lang.reduce(18); },
        "gt":function(lang){ return lang.reduce(18); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(18); },
        "lt":function(lang){ return lang.reduce(18); },
        "mid":function(lang){ return lang.shift(16); },
        "minus":function(lang){ return lang.shift(17); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(18); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.shift(21); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.shift(24); },
        "$":function(lang){ return lang.reduce(18); }
        },
    33:{
        "amp":function(lang){ return lang.shift(6); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.reduce(21); },
        "geq":function(lang){ return lang.reduce(21); },
        "gt":function(lang){ return lang.reduce(21); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(21); },
        "lt":function(lang){ return lang.reduce(21); },
        "mid":function(lang){ return lang.shift(16); },
        "minus":function(lang){ return lang.shift(17); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(21); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.shift(21); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.shift(24); },
        "$":function(lang){ return lang.reduce(21); }
        },
    34:{
        "amp":function(lang){ return lang.shift(6); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.reduce(20); },
        "geq":function(lang){ return lang.reduce(20); },
        "gt":function(lang){ return lang.reduce(20); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(20); },
        "lt":function(lang){ return lang.reduce(20); },
        "mid":function(lang){ return lang.shift(16); },
        "minus":function(lang){ return lang.shift(17); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(20); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.shift(21); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.shift(24); },
        "$":function(lang){ return lang.reduce(20); }
        },
    35:{
        "amp":function(lang){ return lang.reduce(11); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.reduce(11); },
        "divide":function(lang){ return lang.reduce(11); },
        "eq":function(lang){ return lang.reduce(11); },
        "geq":function(lang){ return lang.reduce(11); },
        "gt":function(lang){ return lang.reduce(11); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(11); },
        "lt":function(lang){ return lang.reduce(11); },
        "mid":function(lang){ return lang.reduce(11); },
        "minus":function(lang){ return lang.reduce(11); },
        "modulo":function(lang){ return lang.reduce(11); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(11); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.reduce(11); },
        "power":function(lang){ return lang.reduce(11); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.reduce(11); },
        "up":function(lang){ return lang.reduce(11); },
        "$":function(lang){ return lang.reduce(11); }
        },
    36:{
        "amp":function(lang){ return lang.shift(6); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.reduce(23); },
        "geq":function(lang){ return lang.reduce(23); },
        "gt":function(lang){ return lang.reduce(23); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(23); },
        "lt":function(lang){ return lang.reduce(23); },
        "mid":function(lang){ return lang.shift(16); },
        "minus":function(lang){ return lang.shift(17); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(23); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.shift(21); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.shift(24); },
        "$":function(lang){ return lang.reduce(23); }
        },
    37:{
        "amp":function(lang){ return lang.shift(6); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.reduce(22); },
        "geq":function(lang){ return lang.reduce(22); },
        "gt":function(lang){ return lang.reduce(22); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(22); },
        "lt":function(lang){ return lang.reduce(22); },
        "mid":function(lang){ return lang.shift(16); },
        "minus":function(lang){ return lang.shift(17); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(22); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.shift(21); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.shift(24); },
        "$":function(lang){ return lang.reduce(22); }
        },
    38:{
        "amp":function(lang){ return lang.reduce(15); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.reduce(15); },
        "geq":function(lang){ return lang.reduce(15); },
        "gt":function(lang){ return lang.reduce(15); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(15); },
        "lt":function(lang){ return lang.reduce(15); },
        "mid":function(lang){ return lang.reduce(15); },
        "minus":function(lang){ return lang.shift(17); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(15); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.shift(21); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.reduce(15); },
        "$":function(lang){ return lang.reduce(15); }
        },
    39:{
        "amp":function(lang){ return lang.reduce(3); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.reduce(3); },
        "geq":function(lang){ return lang.reduce(3); },
        "gt":function(lang){ return lang.reduce(3); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(3); },
        "lt":function(lang){ return lang.reduce(3); },
        "mid":function(lang){ return lang.reduce(3); },
        "minus":function(lang){ return lang.reduce(3); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(3); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.reduce(3); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.reduce(3); },
        "$":function(lang){ return lang.reduce(3); }
        },
    40:{
        "amp":function(lang){ return lang.reduce(6); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.reduce(6); },
        "eq":function(lang){ return lang.reduce(6); },
        "geq":function(lang){ return lang.reduce(6); },
        "gt":function(lang){ return lang.reduce(6); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(6); },
        "lt":function(lang){ return lang.reduce(6); },
        "mid":function(lang){ return lang.reduce(6); },
        "minus":function(lang){ return lang.reduce(6); },
        "modulo":function(lang){ return lang.reduce(6); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(6); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.reduce(6); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.reduce(6); },
        "up":function(lang){ return lang.reduce(6); },
        "$":function(lang){ return lang.reduce(6); }
        },
    41:{
        "amp":function(lang){ return lang.shift(6); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.reduce(19); },
        "geq":function(lang){ return lang.reduce(19); },
        "gt":function(lang){ return lang.reduce(19); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(19); },
        "lt":function(lang){ return lang.reduce(19); },
        "mid":function(lang){ return lang.shift(16); },
        "minus":function(lang){ return lang.shift(17); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(19); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.shift(21); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.shift(24); },
        "$":function(lang){ return lang.reduce(19); }
        },
    42:{
        "amp":function(lang){ return lang.reduce(10); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.reduce(10); },
        "divide":function(lang){ return lang.reduce(10); },
        "eq":function(lang){ return lang.reduce(10); },
        "geq":function(lang){ return lang.reduce(10); },
        "gt":function(lang){ return lang.reduce(10); },
        "imp":function(lang){ return lang.reduce(10); },
        "leq":function(lang){ return lang.reduce(10); },
        "lt":function(lang){ return lang.reduce(10); },
        "mid":function(lang){ return lang.reduce(10); },
        "minus":function(lang){ return lang.reduce(10); },
        "modulo":function(lang){ return lang.reduce(10); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(10); },
        "or":function(lang){ return lang.reduce(10); },
        "plus":function(lang){ return lang.reduce(10); },
        "power":function(lang){ return lang.reduce(10); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.reduce(10); },
        "up":function(lang){ return lang.reduce(10); },
        "$":function(lang){ return lang.reduce(10); }
        },
    43:{
        "amp":function(lang){ return lang.reduce(2); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.reduce(2); },
        "geq":function(lang){ return lang.reduce(2); },
        "gt":function(lang){ return lang.reduce(2); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(2); },
        "lt":function(lang){ return lang.reduce(2); },
        "mid":function(lang){ return lang.reduce(2); },
        "minus":function(lang){ return lang.reduce(2); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(2); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.reduce(2); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.reduce(2); },
        "$":function(lang){ return lang.reduce(2); }
        },
    44:{
        "amp":function(lang){ return lang.reduce(7); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.reduce(7); },
        "eq":function(lang){ return lang.reduce(7); },
        "geq":function(lang){ return lang.reduce(7); },
        "gt":function(lang){ return lang.reduce(7); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(7); },
        "lt":function(lang){ return lang.reduce(7); },
        "mid":function(lang){ return lang.reduce(7); },
        "minus":function(lang){ return lang.reduce(7); },
        "modulo":function(lang){ return lang.reduce(7); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(7); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.reduce(7); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.reduce(7); },
        "up":function(lang){ return lang.reduce(7); },
        "$":function(lang){ return lang.reduce(7); }
        },
    45:{
        "amp":function(lang){ return lang.reduce(4); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.reduce(4); },
        "eq":function(lang){ return lang.reduce(4); },
        "geq":function(lang){ return lang.reduce(4); },
        "gt":function(lang){ return lang.reduce(4); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(4); },
        "lt":function(lang){ return lang.reduce(4); },
        "mid":function(lang){ return lang.reduce(4); },
        "minus":function(lang){ return lang.reduce(4); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(4); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.reduce(4); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.reduce(4); },
        "up":function(lang){ return lang.reduce(4); },
        "$":function(lang){ return lang.reduce(4); }
        },
    46:{
        "amp":function(lang){ return lang.reduce(14); },
        "and":function(lang){ return lang.shift(7); },
        "biimp":function(lang){ return lang.shift(8); },
        "divide":function(lang){ return lang.shift(9); },
        "eq":function(lang){ return lang.reduce(14); },
        "geq":function(lang){ return lang.reduce(14); },
        "gt":function(lang){ return lang.reduce(14); },
        "imp":function(lang){ return lang.shift(13); },
        "leq":function(lang){ return lang.reduce(14); },
        "lt":function(lang){ return lang.reduce(14); },
        "mid":function(lang){ return lang.shift(16); },
        "minus":function(lang){ return lang.shift(17); },
        "modulo":function(lang){ return lang.shift(18); },
        "not":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "not-eq":function(lang){ return lang.reduce(14); },
        "or":function(lang){ return lang.shift(20); },
        "plus":function(lang){ return lang.shift(21); },
        "power":function(lang){ return lang.shift(22); },
        "tilde":function(lang){ return lang.error("expected 'operator','delimiter','eoi', but given 'operator'"); },
        "times":function(lang){ return lang.shift(23); },
        "up":function(lang){ return lang.reduce(14); },
        "$":function(lang){ return lang.reduce(14); }
        }
    };
var gotoTable = {
    0:{
        "Exp":function(lang){ return lang.some(1); },
        "Stmt":function(lang){ return lang.some(2); }
        },
    1:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    2:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    3:{
        "Exp":function(lang){ return lang.some(25); },
        "Stmt":function(lang){ return lang.none(); }
        },
    4:{
        "Exp":function(lang){ return lang.some(26); },
        "Stmt":function(lang){ return lang.none(); }
        },
    5:{
        "Exp":function(lang){ return lang.some(27); },
        "Stmt":function(lang){ return lang.none(); }
        },
    6:{
        "Exp":function(lang){ return lang.some(28); },
        "Stmt":function(lang){ return lang.none(); }
        },
    7:{
        "Exp":function(lang){ return lang.some(29); },
        "Stmt":function(lang){ return lang.none(); }
        },
    8:{
        "Exp":function(lang){ return lang.some(30); },
        "Stmt":function(lang){ return lang.none(); }
        },
    9:{
        "Exp":function(lang){ return lang.some(31); },
        "Stmt":function(lang){ return lang.none(); }
        },
    10:{
        "Exp":function(lang){ return lang.some(32); },
        "Stmt":function(lang){ return lang.none(); }
        },
    11:{
        "Exp":function(lang){ return lang.some(33); },
        "Stmt":function(lang){ return lang.none(); }
        },
    12:{
        "Exp":function(lang){ return lang.some(34); },
        "Stmt":function(lang){ return lang.none(); }
        },
    13:{
        "Exp":function(lang){ return lang.some(35); },
        "Stmt":function(lang){ return lang.none(); }
        },
    14:{
        "Exp":function(lang){ return lang.some(36); },
        "Stmt":function(lang){ return lang.none(); }
        },
    15:{
        "Exp":function(lang){ return lang.some(37); },
        "Stmt":function(lang){ return lang.none(); }
        },
    16:{
        "Exp":function(lang){ return lang.some(38); },
        "Stmt":function(lang){ return lang.none(); }
        },
    17:{
        "Exp":function(lang){ return lang.some(39); },
        "Stmt":function(lang){ return lang.none(); }
        },
    18:{
        "Exp":function(lang){ return lang.some(40); },
        "Stmt":function(lang){ return lang.none(); }
        },
    19:{
        "Exp":function(lang){ return lang.some(41); },
        "Stmt":function(lang){ return lang.none(); }
        },
    20:{
        "Exp":function(lang){ return lang.some(42); },
        "Stmt":function(lang){ return lang.none(); }
        },
    21:{
        "Exp":function(lang){ return lang.some(43); },
        "Stmt":function(lang){ return lang.none(); }
        },
    22:{
        "Exp":function(lang){ return lang.some(44); },
        "Stmt":function(lang){ return lang.none(); }
        },
    23:{
        "Exp":function(lang){ return lang.some(45); },
        "Stmt":function(lang){ return lang.none(); }
        },
    24:{
        "Exp":function(lang){ return lang.some(46); },
        "Stmt":function(lang){ return lang.none(); }
        },
    25:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    26:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    27:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    28:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    29:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    30:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    31:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    32:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    33:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    34:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    35:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    36:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    37:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    38:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    39:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    40:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    41:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    42:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    43:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    44:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    45:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        },
    46:{
        "Exp":function(lang){ return lang.none(); },
        "Stmt":function(lang){ return lang.none(); }
        }
    };
var tokens = [
{name:"amp",cap:false,reg:"&"},
{name:"and",cap:false,reg:"&&"},
{name:"biimp",cap:false,reg:"<=>"},
{name:"divide",cap:false,reg:"\\/"},
{name:"eq",cap:false,reg:"=="},
{name:"geq",cap:false,reg:"=>"},
{name:"gt",cap:false,reg:">"},
{name:"imp",cap:false,reg:"=>"},
{name:"leq",cap:false,reg:"<="},
{name:"lt",cap:false,reg:"<"},
{name:"mid",cap:false,reg:"\\|"},
{name:"minus",cap:false,reg:"-"},
{name:"modulo",cap:false,reg:"%"},
{name:"not",cap:false,reg:"!"},
{name:"not-eq",cap:false,reg:"!="},
{name:"or",cap:false,reg:"\\|\\|"},
{name:"plus",cap:false,reg:"\\+"},
{name:"power",cap:false,reg:"\\*\\*"},
{name:"tilde",cap:false,reg:"~"},
{name:"times",cap:false,reg:"\\*"},
{name:"up",cap:false,reg:"^"}
]
var btokens = ];