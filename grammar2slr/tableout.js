var productions_str = {
    0:{prod:"__",rside:["Exp"]},
    1:{prod:"Exp",rside:["Exp","minus","Exp"]},
    2:{prod:"Exp",rside:["Exp","plus","Exp"]},
    3:{prod:"Exp",rside:["Exp","times","Exp"]},
    4:{prod:"Exp",rside:["Exp","divide","Exp"]},
    5:{prod:"Exp",rside:["Exp","power","Exp"]},
    6:{prod:"Exp",rside:["Call"]},
    7:{prod:"Exp",rside:["Atom"]},
    8:{prod:"Exp",rside:["minus","Exp"]},
    9:{prod:"Call",rside:["id","lpar","Args","rpar"]},
    10:{prod:"Args",rside:[]},
    11:{prod:"Args",rside:["Arg","Args'"]},
    12:{prod:"Args'",rside:[]},
    13:{prod:"Args'",rside:["comma","Arg","Args'"]},
    14:{prod:"Arg",rside:["Exp"]},
    15:{prod:"Atom",rside:["lpar","Exp","rpar"]},
    16:{prod:"Atom",rside:["float"]},
    17:{prod:"Atom",rside:["int"]}
};
var actionTable = {
    0:{
        "comma":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "float":function(lang){ return lang.shift(4); },
        "id":function(lang){ return lang.shift(5); },
        "int":function(lang){ return lang.shift(6); },
        "lpar":function(lang){ return lang.shift(7); },
        "minus":function(lang){ return lang.shift(8); },
        "plus":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'power'"); },
        "rpar":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'parentheses'"); },
        "times":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given '$'"); }
        },
    1:{
        "comma":function(lang){ return lang.reduce(7); },
        "divide":function(lang){ return lang.reduce(7); },
        "float":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'parentheses'"); },
        "minus":function(lang){ return lang.reduce(7); },
        "plus":function(lang){ return lang.reduce(7); },
        "power":function(lang){ return lang.reduce(7); },
        "rpar":function(lang){ return lang.reduce(7); },
        "times":function(lang){ return lang.reduce(7); },
        "$":function(lang){ return lang.reduce(7); }
        },
    2:{
        "comma":function(lang){ return lang.reduce(6); },
        "divide":function(lang){ return lang.reduce(6); },
        "float":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'parentheses'"); },
        "minus":function(lang){ return lang.reduce(6); },
        "plus":function(lang){ return lang.reduce(6); },
        "power":function(lang){ return lang.reduce(6); },
        "rpar":function(lang){ return lang.reduce(6); },
        "times":function(lang){ return lang.reduce(6); },
        "$":function(lang){ return lang.reduce(6); }
        },
    3:{
        "comma":function(lang){ return lang.error("expected 'operator','power','times','eoi', but given 'comma'"); },
        "divide":function(lang){ return lang.shift(9); },
        "float":function(lang){ return lang.error("expected 'operator','power','times','eoi', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'operator','power','times','eoi', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'operator','power','times','eoi', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'operator','power','times','eoi', but given 'parentheses'"); },
        "minus":function(lang){ return lang.shift(10); },
        "plus":function(lang){ return lang.shift(11); },
        "power":function(lang){ return lang.shift(12); },
        "rpar":function(lang){ return lang.error("expected 'operator','power','times','eoi', but given 'parentheses'"); },
        "times":function(lang){ return lang.shift(13); },
        "$":function(lang){ return lang.accept(); }
        },
    4:{
        "comma":function(lang){ return lang.reduce(16); },
        "divide":function(lang){ return lang.reduce(16); },
        "float":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'parentheses'"); },
        "minus":function(lang){ return lang.reduce(16); },
        "plus":function(lang){ return lang.reduce(16); },
        "power":function(lang){ return lang.reduce(16); },
        "rpar":function(lang){ return lang.reduce(16); },
        "times":function(lang){ return lang.reduce(16); },
        "$":function(lang){ return lang.reduce(16); }
        },
    5:{
        "comma":function(lang){ return lang.error("expected 'parentheses', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'parentheses', but given 'operator'"); },
        "float":function(lang){ return lang.error("expected 'parentheses', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'parentheses', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'parentheses', but given 'operand'"); },
        "lpar":function(lang){ return lang.shift(14); },
        "minus":function(lang){ return lang.error("expected 'parentheses', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'parentheses', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'parentheses', but given 'power'"); },
        "rpar":function(lang){ return lang.error("expected 'parentheses', but given 'parentheses'"); },
        "times":function(lang){ return lang.error("expected 'parentheses', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'parentheses', but given '$'"); }
        },
    6:{
        "comma":function(lang){ return lang.reduce(17); },
        "divide":function(lang){ return lang.reduce(17); },
        "float":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'parentheses'"); },
        "minus":function(lang){ return lang.reduce(17); },
        "plus":function(lang){ return lang.reduce(17); },
        "power":function(lang){ return lang.reduce(17); },
        "rpar":function(lang){ return lang.reduce(17); },
        "times":function(lang){ return lang.reduce(17); },
        "$":function(lang){ return lang.reduce(17); }
        },
    7:{
        "comma":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "float":function(lang){ return lang.shift(4); },
        "id":function(lang){ return lang.shift(5); },
        "int":function(lang){ return lang.shift(6); },
        "lpar":function(lang){ return lang.shift(7); },
        "minus":function(lang){ return lang.shift(8); },
        "plus":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'power'"); },
        "rpar":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'parentheses'"); },
        "times":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given '$'"); }
        },
    8:{
        "comma":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "float":function(lang){ return lang.shift(4); },
        "id":function(lang){ return lang.shift(5); },
        "int":function(lang){ return lang.shift(6); },
        "lpar":function(lang){ return lang.shift(7); },
        "minus":function(lang){ return lang.shift(8); },
        "plus":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'power'"); },
        "rpar":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'parentheses'"); },
        "times":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given '$'"); }
        },
    9:{
        "comma":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "float":function(lang){ return lang.shift(4); },
        "id":function(lang){ return lang.shift(5); },
        "int":function(lang){ return lang.shift(6); },
        "lpar":function(lang){ return lang.shift(7); },
        "minus":function(lang){ return lang.shift(8); },
        "plus":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'power'"); },
        "rpar":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'parentheses'"); },
        "times":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given '$'"); }
        },
    10:{
        "comma":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "float":function(lang){ return lang.shift(4); },
        "id":function(lang){ return lang.shift(5); },
        "int":function(lang){ return lang.shift(6); },
        "lpar":function(lang){ return lang.shift(7); },
        "minus":function(lang){ return lang.shift(8); },
        "plus":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'power'"); },
        "rpar":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'parentheses'"); },
        "times":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given '$'"); }
        },
    11:{
        "comma":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "float":function(lang){ return lang.shift(4); },
        "id":function(lang){ return lang.shift(5); },
        "int":function(lang){ return lang.shift(6); },
        "lpar":function(lang){ return lang.shift(7); },
        "minus":function(lang){ return lang.shift(8); },
        "plus":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'power'"); },
        "rpar":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'parentheses'"); },
        "times":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given '$'"); }
        },
    12:{
        "comma":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "float":function(lang){ return lang.shift(4); },
        "id":function(lang){ return lang.shift(5); },
        "int":function(lang){ return lang.shift(6); },
        "lpar":function(lang){ return lang.shift(7); },
        "minus":function(lang){ return lang.shift(8); },
        "plus":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'power'"); },
        "rpar":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'parentheses'"); },
        "times":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given '$'"); }
        },
    13:{
        "comma":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "float":function(lang){ return lang.shift(4); },
        "id":function(lang){ return lang.shift(5); },
        "int":function(lang){ return lang.shift(6); },
        "lpar":function(lang){ return lang.shift(7); },
        "minus":function(lang){ return lang.shift(8); },
        "plus":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'power'"); },
        "rpar":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'parentheses'"); },
        "times":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given '$'"); }
        },
    14:{
        "comma":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "float":function(lang){ return lang.shift(4); },
        "id":function(lang){ return lang.shift(5); },
        "int":function(lang){ return lang.shift(6); },
        "lpar":function(lang){ return lang.shift(7); },
        "minus":function(lang){ return lang.shift(8); },
        "plus":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'power'"); },
        "rpar":function(lang){ return lang.reduce(10); },
        "times":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given '$'"); }
        },
    15:{
        "comma":function(lang){ return lang.error("expected 'operator','power','parentheses','times', but given 'comma'"); },
        "divide":function(lang){ return lang.shift(9); },
        "float":function(lang){ return lang.error("expected 'operator','power','parentheses','times', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'operator','power','parentheses','times', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'operator','power','parentheses','times', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'operator','power','parentheses','times', but given 'parentheses'"); },
        "minus":function(lang){ return lang.shift(10); },
        "plus":function(lang){ return lang.shift(11); },
        "power":function(lang){ return lang.shift(12); },
        "rpar":function(lang){ return lang.shift(25); },
        "times":function(lang){ return lang.shift(13); },
        "$":function(lang){ return lang.error("expected 'operator','power','parentheses','times', but given '$'"); }
        },
    16:{
        "comma":function(lang){ return lang.reduce(8); },
        "divide":function(lang){ return lang.shift(9); },
        "float":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'parentheses'"); },
        "minus":function(lang){ return lang.reduce(8); },
        "plus":function(lang){ return lang.reduce(8); },
        "power":function(lang){ return lang.shift(12); },
        "rpar":function(lang){ return lang.reduce(8); },
        "times":function(lang){ return lang.shift(13); },
        "$":function(lang){ return lang.reduce(8); }
        },
    17:{
        "comma":function(lang){ return lang.reduce(4); },
        "divide":function(lang){ return lang.reduce(4); },
        "float":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'parentheses'"); },
        "minus":function(lang){ return lang.reduce(4); },
        "plus":function(lang){ return lang.reduce(4); },
        "power":function(lang){ return lang.shift(12); },
        "rpar":function(lang){ return lang.reduce(4); },
        "times":function(lang){ return lang.reduce(4); },
        "$":function(lang){ return lang.reduce(4); }
        },
    18:{
        "comma":function(lang){ return lang.reduce(1); },
        "divide":function(lang){ return lang.shift(9); },
        "float":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'parentheses'"); },
        "minus":function(lang){ return lang.reduce(1); },
        "plus":function(lang){ return lang.reduce(1); },
        "power":function(lang){ return lang.shift(12); },
        "rpar":function(lang){ return lang.reduce(1); },
        "times":function(lang){ return lang.shift(13); },
        "$":function(lang){ return lang.reduce(1); }
        },
    19:{
        "comma":function(lang){ return lang.reduce(2); },
        "divide":function(lang){ return lang.shift(9); },
        "float":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'parentheses'"); },
        "minus":function(lang){ return lang.reduce(2); },
        "plus":function(lang){ return lang.reduce(2); },
        "power":function(lang){ return lang.shift(12); },
        "rpar":function(lang){ return lang.reduce(2); },
        "times":function(lang){ return lang.shift(13); },
        "$":function(lang){ return lang.reduce(2); }
        },
    20:{
        "comma":function(lang){ return lang.reduce(5); },
        "divide":function(lang){ return lang.reduce(5); },
        "float":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'parentheses'"); },
        "minus":function(lang){ return lang.reduce(5); },
        "plus":function(lang){ return lang.reduce(5); },
        "power":function(lang){ return lang.shift(12); },
        "rpar":function(lang){ return lang.reduce(5); },
        "times":function(lang){ return lang.reduce(5); },
        "$":function(lang){ return lang.reduce(5); }
        },
    21:{
        "comma":function(lang){ return lang.reduce(3); },
        "divide":function(lang){ return lang.reduce(3); },
        "float":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'parentheses'"); },
        "minus":function(lang){ return lang.reduce(3); },
        "plus":function(lang){ return lang.reduce(3); },
        "power":function(lang){ return lang.shift(12); },
        "rpar":function(lang){ return lang.reduce(3); },
        "times":function(lang){ return lang.reduce(3); },
        "$":function(lang){ return lang.reduce(3); }
        },
    22:{
        "comma":function(lang){ return lang.shift(27); },
        "divide":function(lang){ return lang.error("expected 'comma','parentheses', but given 'operator'"); },
        "float":function(lang){ return lang.error("expected 'comma','parentheses', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','parentheses', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','parentheses', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','parentheses', but given 'parentheses'"); },
        "minus":function(lang){ return lang.error("expected 'comma','parentheses', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'comma','parentheses', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'comma','parentheses', but given 'power'"); },
        "rpar":function(lang){ return lang.reduce(12); },
        "times":function(lang){ return lang.error("expected 'comma','parentheses', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'comma','parentheses', but given '$'"); }
        },
    23:{
        "comma":function(lang){ return lang.error("expected 'parentheses', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'parentheses', but given 'operator'"); },
        "float":function(lang){ return lang.error("expected 'parentheses', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'parentheses', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'parentheses', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'parentheses', but given 'parentheses'"); },
        "minus":function(lang){ return lang.error("expected 'parentheses', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'parentheses', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'parentheses', but given 'power'"); },
        "rpar":function(lang){ return lang.shift(28); },
        "times":function(lang){ return lang.error("expected 'parentheses', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'parentheses', but given '$'"); }
        },
    24:{
        "comma":function(lang){ return lang.reduce(14); },
        "divide":function(lang){ return lang.shift(9); },
        "float":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times', but given 'parentheses'"); },
        "minus":function(lang){ return lang.shift(10); },
        "plus":function(lang){ return lang.shift(11); },
        "power":function(lang){ return lang.shift(12); },
        "rpar":function(lang){ return lang.reduce(14); },
        "times":function(lang){ return lang.shift(13); },
        "$":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times', but given '$'"); }
        },
    25:{
        "comma":function(lang){ return lang.reduce(15); },
        "divide":function(lang){ return lang.reduce(15); },
        "float":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'parentheses'"); },
        "minus":function(lang){ return lang.reduce(15); },
        "plus":function(lang){ return lang.reduce(15); },
        "power":function(lang){ return lang.reduce(15); },
        "rpar":function(lang){ return lang.reduce(15); },
        "times":function(lang){ return lang.reduce(15); },
        "$":function(lang){ return lang.reduce(15); }
        },
    26:{
        "comma":function(lang){ return lang.error("expected 'parentheses', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'parentheses', but given 'operator'"); },
        "float":function(lang){ return lang.error("expected 'parentheses', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'parentheses', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'parentheses', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'parentheses', but given 'parentheses'"); },
        "minus":function(lang){ return lang.error("expected 'parentheses', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'parentheses', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'parentheses', but given 'power'"); },
        "rpar":function(lang){ return lang.reduce(11); },
        "times":function(lang){ return lang.error("expected 'parentheses', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'parentheses', but given '$'"); }
        },
    27:{
        "comma":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "float":function(lang){ return lang.shift(4); },
        "id":function(lang){ return lang.shift(5); },
        "int":function(lang){ return lang.shift(6); },
        "lpar":function(lang){ return lang.shift(7); },
        "minus":function(lang){ return lang.shift(8); },
        "plus":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'power'"); },
        "rpar":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'parentheses'"); },
        "times":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'operand','parentheses','operator', but given '$'"); }
        },
    28:{
        "comma":function(lang){ return lang.reduce(9); },
        "divide":function(lang){ return lang.reduce(9); },
        "float":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','operator','power','parentheses','times','eoi', but given 'parentheses'"); },
        "minus":function(lang){ return lang.reduce(9); },
        "plus":function(lang){ return lang.reduce(9); },
        "power":function(lang){ return lang.reduce(9); },
        "rpar":function(lang){ return lang.reduce(9); },
        "times":function(lang){ return lang.reduce(9); },
        "$":function(lang){ return lang.reduce(9); }
        },
    29:{
        "comma":function(lang){ return lang.shift(27); },
        "divide":function(lang){ return lang.error("expected 'comma','parentheses', but given 'operator'"); },
        "float":function(lang){ return lang.error("expected 'comma','parentheses', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'comma','parentheses', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'comma','parentheses', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'comma','parentheses', but given 'parentheses'"); },
        "minus":function(lang){ return lang.error("expected 'comma','parentheses', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'comma','parentheses', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'comma','parentheses', but given 'power'"); },
        "rpar":function(lang){ return lang.reduce(12); },
        "times":function(lang){ return lang.error("expected 'comma','parentheses', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'comma','parentheses', but given '$'"); }
        },
    30:{
        "comma":function(lang){ return lang.error("expected 'parentheses', but given 'comma'"); },
        "divide":function(lang){ return lang.error("expected 'parentheses', but given 'operator'"); },
        "float":function(lang){ return lang.error("expected 'parentheses', but given 'operand'"); },
        "id":function(lang){ return lang.error("expected 'parentheses', but given 'operand'"); },
        "int":function(lang){ return lang.error("expected 'parentheses', but given 'operand'"); },
        "lpar":function(lang){ return lang.error("expected 'parentheses', but given 'parentheses'"); },
        "minus":function(lang){ return lang.error("expected 'parentheses', but given 'operator'"); },
        "plus":function(lang){ return lang.error("expected 'parentheses', but given 'operator'"); },
        "power":function(lang){ return lang.error("expected 'parentheses', but given 'power'"); },
        "rpar":function(lang){ return lang.reduce(13); },
        "times":function(lang){ return lang.error("expected 'parentheses', but given 'times'"); },
        "$":function(lang){ return lang.error("expected 'parentheses', but given '$'"); }
        }
    };
var gotoTable = {
    0:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.some(1); },
        "Call":function(lang){ return lang.some(2); },
        "Exp":function(lang){ return lang.some(3); }
        },
    1:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    2:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    3:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    4:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    5:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    6:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    7:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.some(1); },
        "Call":function(lang){ return lang.some(2); },
        "Exp":function(lang){ return lang.some(15); }
        },
    8:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.some(1); },
        "Call":function(lang){ return lang.some(2); },
        "Exp":function(lang){ return lang.some(16); }
        },
    9:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.some(1); },
        "Call":function(lang){ return lang.some(2); },
        "Exp":function(lang){ return lang.some(17); }
        },
    10:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.some(1); },
        "Call":function(lang){ return lang.some(2); },
        "Exp":function(lang){ return lang.some(18); }
        },
    11:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.some(1); },
        "Call":function(lang){ return lang.some(2); },
        "Exp":function(lang){ return lang.some(19); }
        },
    12:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.some(1); },
        "Call":function(lang){ return lang.some(2); },
        "Exp":function(lang){ return lang.some(20); }
        },
    13:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.some(1); },
        "Call":function(lang){ return lang.some(2); },
        "Exp":function(lang){ return lang.some(21); }
        },
    14:{
        "Arg":function(lang){ return lang.some(22); },
        "Args":function(lang){ return lang.some(23); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.some(1); },
        "Call":function(lang){ return lang.some(2); },
        "Exp":function(lang){ return lang.some(24); }
        },
    15:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    16:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    17:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    18:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    19:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    20:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    21:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    22:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.some(26); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    23:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    24:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    25:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    26:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    27:{
        "Arg":function(lang){ return lang.some(29); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.some(1); },
        "Call":function(lang){ return lang.some(2); },
        "Exp":function(lang){ return lang.some(24); }
        },
    28:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    29:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.some(30); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        },
    30:{
        "Arg":function(lang){ return lang.none(); },
        "Args":function(lang){ return lang.none(); },
        "Args'":function(lang){ return lang.none(); },
        "Atom":function(lang){ return lang.none(); },
        "Call":function(lang){ return lang.none(); },
        "Exp":function(lang){ return lang.none(); }
        }
    };
var tokens = [
{name:"int",cap:true,reg:"[0-9]+"},
{name:"float",cap:true,reg:"[0-9]*.[0-9]+"},
{name:"id",cap:true,reg:"[a-zA-Z]+"},
{name:"plus",cap:false,reg:"\\+"},
{name:"minus",cap:false,reg:"-"},
{name:"times",cap:false,reg:"\\*"},
{name:"divide",cap:false,reg:"/"},
{name:"power",cap:false,reg:"\\^"},
{name:"lpar",cap:false,reg:"("},
{name:"rpar",cap:false,reg:")"},
{name:"comma",cap:false,reg:","}
]
var btokens = ["\\n","\\r","\\t"," "];