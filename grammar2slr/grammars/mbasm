#statements
token -cap "label","directive" as "[a-zA-Z_]+:", ".[a-zA-Z0-9]+"
token -cap "id","reg" as "[a-zA-Z_][a-zA-Z0-9_]*", "%[a-zA-Z0-9]+"

#constants
token -cap "int_scalar", "int_dec" as "1|2|4|8", "[1-9][0-9]*" 
token -cap "int_hex", "int_bin" as "0x[a-zA-Z0-9]+", "0b[01]++"
token -cap "float", "string" as "0e[0-9]*.[0-9]+", "\g[^\g]*\g"

#pars
token "lpar", "rpar" as "(", ")"

#operators
token "dollar", "sign", "comma", "ast_dot" as "$", "\\+|-", ",", "\\*"

#delims
token "delim" as "\\n|;"

#ignore
!token "\t", " ", "#[^\\n]*\\n"

#groups
group "constant" {"float","string"}
group "intermediate" {"int_dec","int_hex","dollar","sign"}
group "register" {"reg"}
group "scalar" {"int_scalar"}
group "statement" {"label","directive"}
group "end of statement" {"delim"}
group "parenthesis" {"lpar","rpar"}

#productions
prod Statement      -> Label Statement' "delim" Statement |
prod Statement'     -> Directive | Instr |

prod Label          -> "label" Label |
prod Directive      -> "directive" DirectiveArgs
prod DirectiveArgs  -> Exp DirectiveArgs' |
prod DirectiveArgs' -> "comma" Exp DirectiveArgs' |

prod Instr          -> "id" InstrArgs
prod InstrArgs      -> InstrArgs'' InstrArgs'
                     | "ast_dot" InstrArgs'' InstrArgs'
                     |
prod InstrArgs'     -> "comma" InstrArgs'' InstrArgs' |
prod InstrArgs''    -> Exp
                     | "dollar" Imm
                     | "reg"
                     | "lpar" "reg" "rpar"
                     | Exp "lpar" "reg" "rpar"
                     | "lpar" "reg" "comma" "reg" "rpar"
                     | Exp "lpar" "reg" "comma" "reg" "rpar"
                     | "lpar" "comma" "reg" "comma" "int_scalar" "rpar"
                     | Exp "lpar" "comma" "reg" "comma" "int_scalar" "rpar"
                     | "lpar" "reg" "comma" "reg" "comma" "int_scalar" "rpar"
                     | Exp "lpar" "reg" "comma" "reg" "comma" "int_scalar" "rpar"

prod Exp            -> "id"
                     | "float"
                     | "string"
                     | Imm

prod Imm            -> "sign" Imm' | Imm'
prod Imm'           -> "int_dec"
                     | "int_hex"
                     | "int_bin"
