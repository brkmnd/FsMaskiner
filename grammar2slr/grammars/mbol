#Tokens
token   "lpar"  ,"lbrace"   ,"lbracket" ,"rpar" ,"rbrace"   ,"rbracket"
    as  "\\("     ,"\\{"    ,"\\["      ,"\\)"  ,"\\}"      ,"\\]"
token   "plus"  ,"minus"    ,"times"    ,"divide"   ,"modulo"   ,"power"
    as  "\\+"   ,"-"        ,"\\*"      ,"\\/"      ,"%"      ,"\\*\\*"
token   "eq"    ,"not-eq"   ,"gt"   ,"geq"  ,"lt"   ,"leq"
    as  "=="    ,"!="       ,">"    ,">="   ,"<"    ,"<="
token   "and"   ,"or"       ,"imp"      ,"biimp"    ,"not"
    as  "&&"    ,"\\|\\|"   ,"=>"       ,"<=>"      ,"!"
token   "lapp"  ,"rapp"     ,"rarr"
    as  "|>"    ,"<|"       ,"->"
token   "comma" ,"dot"  ,"colon"    ,"mid"  ,"uscore"   ,"qmark"    ,"hash"
    as  ","     ,"."    ,":"        ,"\\|"  ,"_"        ,"?"        ,"#"
token   "att"   ,"up"   ,"amp"  ,"tilde"    ,"scolon"    ,"dcolon"  ,"marr"
    as  "@"     ,"^"    ,"&"    ,"~"        ,";"            ,"::"   ,":>"
token   "sleft" ,"sright"
    as  "<<"    ,">>"
token   "freesymbs"
    as  "="
#caps
token -cap  "int"           ,"float"        ,"string"   ,"id"   ,"bool"
    as      "[0-9][0-9]*"   ,"[0.9]*.[0-9]+","\g[^\g]\g","[a-z]","true|false"
token -cap  "parameter"
    as      "?[a-zA-Z]+"

#Groups
group "parenthese" {"lpar","lbrace","lbracket","rpar","rbrace","rbracket"}
group "operator" {"plus","minus","times","divide","modulo","power","and","or","imp","biimp","not","eq","not-eq","gt","geq","lt","leq","lapp","rapp","rarr","up","amp","tilde"}
group "delimiter" {"comma","dot","colon","mid","uscore","qmark","semicolon"}

#Precedence
#misc ops
prec "colon"    1
prec "dcolon"   1
prec "scolon"   1
prec "marr"     1
prec "att"      1
prec "lbracem"  1
#ops
prec "rapp"     2
prec "lapp"     3
prec "rarr"     4

prec "eq"       5
prec "not-eq"   5
prec "gt"       5
prec "geq"      5
prec "lt"       5
prec "leq"      5
#bitwise
prec "sleft"    6
prec "sright"   6
prec "band"     7
prec "beor"     8
prec "bor"      9
prec "tilde"    10

prec "minus"    11
prec "plus"     11
prec "times"    12
prec "divide"   12
prec "modulo"   13
prec "power"    13

prec "biimp"    14
prec "imp"      15
prec "or"       16
prec "and"      17
prec "not"      18

#Associacivity
assoc "left" : "lapp","eq","not-eq","gt","geq","lt","leq","minus","plus","times","divide","modulo","not","and","or","band","bor","beor","rarr","marr","att","scolon","sleft","sright","lbracem"
assoc "right" : "rapp","imp","biimp","power","dcolon"

#Arithmetic
prod Exp        -> Exp "plus" Exp
prod Exp        -> Exp "minus" Exp
prod Exp        -> Exp "times" Exp
prod Exp        -> Exp "divide" Exp
prod Exp        -> Exp "modulo" Exp
prod Exp        -> Exp "power" Exp
prod Exp        -> "minus" Exp
#Logic
prod Exp        -> Exp "and" Exp
prod Exp        -> Exp "or" Exp
prod Exp        -> Exp "imp" Exp
prod Exp        -> Exp "biimp" Exp
prod Exp        -> "not" Exp
#Bitwise
prod Exp        -> Exp "beor" Exp
prod Exp        -> Exp "bor" Exp
prod Exp        -> Exp "band" Exp
prod Exp        -> Exp "sleft" Exp
prod Exp        -> Exp "sright" Exp
prod Exp        -> "tilde" Exp
#Relations
prod Exp        -> Exp "eq" Exp
prod Exp        -> Exp "not-eq" Exp
prod Exp        -> Exp "gt" Exp
prod Exp        -> Exp "geq" Exp
prod Exp        -> Exp "lt" Exp
prod Exp        -> Exp "leq" Exp
#Functions
prod Exp        -> Exp "lapp" Exp
prod Exp        -> Exp "rapp" Exp
prod Exp        -> Exp "rarr" Exp
#DataOps
prod Exp        -> Exp "dcolon" Exp
prod Exp        -> Exp "att" Exp
prod Exp        -> Atom "lbracket" "int" "rbracket"
#Grouping
prod Exp        -> "hash" Iter
prod Exp        -> Def
prod Exp        -> Atom
prod Exp        -> Exp "scolon" Exp
#Matching
prod Exp        -> Exp "lbracem" Matcher
prod Matcher    -> Matcher'' Matcher'
prod Matcher'   -> "mid" Matcher'' Matcher' | "rbracem"
prod Matcher''  -> MatchBind MatchWhen "colon" Exp
prod MatchBind  -> Atom MatchOp
prod MatchOp    -> "dcolon" Atom
                 |
prod MatchWhen  -> "qmark" Exp |
#Atoms
prod Atom       -> Atom'' | "lpar" AtomTuple "rpar"
prod AtomTuple  -> Exp AtomTuple' |
prod AtomTuple' -> "comma" Exp AtomTuple' |
prod Atom''     -> "int"
                 | "float"
                 | "string"
                 | "id"
                 | "up" "id"
                 | "bool"
                 | "uscore"
                 | "null"
                 | "parameter"
                 | List
                 | Arr
#Complex literals
prod List       -> "lbracket" List' "rbracket"
prod List'      -> "int" "dot" "dot" "int"
                 | Exp List''
                 |
prod List''     -> "comma" Exp List''
prod Arr        -> "lbracketm" List' "rbracketm"
#Iterator
prod Iter       -> IterList | IterArr
prod IterList   -> "lbracket" Arg "mid" Exp "rbracket"
prod IterArr    -> "lbracketm" Arg "mid" Exp "rbracketm"
#Define
prod Def        -> "def" Exp "lbrace" Def' "rbrace"
prod Def'       -> "id" Def'
                 | "parameter" Def'
                 | "qparameter" Def'
                 | "freesymbs" Def'
                 |
